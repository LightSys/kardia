$Version=2$
plugin_rcpt_giftimport_CDM "widget/component-decl"
    {
    // In the future this will be an actual visual config tool,
    // but for now we just use it to supply the infrastructure.
    //
    description = "Suran CDM+ via JSON / REST API";
    tag = "CDM";
    sql = "		i_eg_service = 'CDM',
			i_eg_processor = 'Suran',
			i_eg_receipt_desired = null,
			i_eg_anonymous = null,
			i_eg_prayforme = null,
			i_eg_acctmap_future = 1,
			i_eg_fundmap_future = 1,
			i_eg_donormap_future = 1,
			s_date_created = getdate(),
			s_created_by = user_name(),
			s_date_modified = getdate(),
			s_modified_by = user_name(),

			-- Fields from gift data
			i_eg_donor_uuid = convert(string, :g:donor_id),
			i_eg_trx_uuid = :g:transaction_id,
			i_eg_status = condition(:g:status = 'Cleared' and char_length(:g:deposit_date) > 1, 'paid', condition(:g:status = 'Processing', 'pending', condition(:g:status = 'Returned', 'returned', lower(:g:status)))),
			i_eg_gift_trx_date = convert(datetime, :g:transaction_date),
			i_eg_gift_settlement_date = condition(char_length(:g:deposit_date) > 1, convert(datetime, :g:deposit_date), null),
			i_eg_deposit_date = convert(datetime, :g:deposit_date),
			i_eg_deposit_uuid = :g:deposit_id,
			i_eg_gift_amount = convert(money, :g:amount),
			i_eg_net_amount = convert(money, :g:net_amount),
			i_eg_desig_name = condition(charindex('(', :g:designation) == 1, substring(:g:designation, charindex(') ', :g:designation) + 2, char_length(:g:designation)) + ' ' + substring(:g:designation, 1, charindex(') ', :g:designation)), :g:designation),
			i_eg_desig_notes = condition(char_length(isnull(:g:designation_memo,'')) > 1, :g:designation_memo, condition(char_length(isnull(:g:main_memo, '')) > 1, :g:main_memo, '')),
			i_eg_desig_uuid = convert(string, :g:designation_id),
			i_eg_donor_alt_id = convert(string, :don:donorguid),
			i_eg_donor_name = :g:donor_first_name + ' ' + :g:donor_last_name,
			i_eg_donor_given_name = :g:donor_first_name,
			i_eg_donor_surname = :g:donor_last_name,
			i_eg_donor_middle_name = null,
			i_eg_donor_prefix = null,
			i_eg_donor_suffix = null,
			i_eg_donor_addr1 = :g:address1,
			i_eg_donor_addr2 = :g:address2,
			i_eg_donor_addr3 = :g:address3,
			i_eg_donor_city = :g:city,
			i_eg_donor_state = :g:state,
			i_eg_donor_postal = :g:zip,
			i_eg_donor_country = :don:countrycode,
			i_eg_donor_email = :g:email_address,
			i_eg_donor_phone = :g:phone,
			i_eg_gift_pmt_type = condition(:g:account_type = 'VISA', 'Visa', condition(lower(:g:account_type) = 'checking' or lower(:g:account_type) = 'savings' or lower(:g:account_type) = 'ach', 'ACH', condition(:g:account_type = 'MSTR', 'MasterCard', condition(:g:account_type = 'DISC', 'Discover', '')))),

			-- Fields from Deposit data
			i_eg_deposit_gross_amt = convert(money, :dep:GrossAmount),
			i_eg_deposit_amt = convert(money, :dep:NetAmount),

			-- Misc fields NEEDED
			i_eg_returned_status = null, -- (select :rc:ResponseCodeDescr from /apps/kardia/modules/eg_stech/egsapi.http/ResponseCodesSelect/ResponseCodes rc where :rc:ResponseCodeValue = :t:ResponseCode), -- NEED
			i_eg_gift_lastfour = null, -- NEED
			i_eg_account_uuid = '', --:t:AccountGUID, -- NEED

			-- Fields from account schedule data - NEEDED
			i_eg_gift_uuid = '', --:t:AccountScheduleGUID, -- NEED
			i_eg_gift_interval = '', -- NEED
			i_eg_gift_date = convert(datetime, :g:transaction_date) --isnull(:ac:i_eg_gift_date, convert(datetime, :t:TransactionDate)) -- NEED
		from	
			object /apps/kardia/modules/eg_suran/suranapiv2_login.http/ l,
			identity /apps/kardia/modules/eg_suran/suranapiv2_gifts.http/p1/response g,
			wildcard '/apps/kardia/modules/eg_suran/suranapiv2_donors.http/p1/data/*' don,
			/apps/kardia/modules/eg_suran/deposits.qy dep
		where
			:l:data = 'Login successful' and
			:don:id =* :g:donor_id and
			(:dep:DepositID = :g:deposit_id or :dep:CreditID = :g:deposit_id)
		";

    upsert_sql="on duplicate
			:a_ledger_number, :i_eg_trx_uuid, :i_eg_desig_uuid
		update set
			:i_eg_deposit_date = convert(datetime, :g:deposit_date),
			:i_eg_deposit_uuid = convert(string, :g:deposit_id),
			:i_eg_deposit_gross_amt = convert(money, :dep:GrossAmount),
			:i_eg_deposit_amt = convert(money, :dep:NetAmount),
			:i_eg_net_amount = convert(money, :g:net_amount),
			:i_eg_desig_notes = condition(char_length(isnull(:g:designation_memo,'')) > 1, :g:designation_memo, condition(char_length(isnull(:g:main_memo, '')) > 1, :g:main_memo, '')),
			:i_eg_status = condition(:g:status = 'Cleared' and char_length(:g:deposit_date) > 1, 'paid', condition(:g:status = 'Processing', 'pending', condition(:g:status = 'Returned', 'returned', lower(:g:status)))),
			:i_eg_returned_status = '', -- (select :rc:ResponseCodeDescr from /apps/kardia/modules/eg_stech/egsapi.http/ResponseCodesSelect/ResponseCodes rc where :rc:ResponseCodeValue = :t:ResponseCode), -- NEED
			:i_eg_gift_settlement_date = condition(char_length(:g:deposit_date) > 1, convert(datetime, :g:deposit_date), null),
			:s_date_modified = getdate() IF MODIFIED,
			:s_modified_by = user_name() IF MODIFIED
		";

    postprocess_sql="
		select 0 where 0 = 1
		";

    old_postprocess_sql="
		update
			identity /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows eg
		set
			:eg:i_eg_gift_lastfour = (select :eg2:i_eg_gift_lastfour from /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows eg2 where :eg2:a_ledger_number = :eg:a_ledger_number and :eg2:i_eg_donor_uuid = :eg:i_eg_donor_uuid and :eg2:i_eg_account_uuid = :eg:i_eg_account_uuid order by :eg2:i_eg_gift_trx_date desc limit 1),
			:eg:i_eg_gift_pmt_type = (select :eg2:i_eg_gift_pmt_type from /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows eg2 where :eg2:a_ledger_number = :eg:a_ledger_number and :eg2:i_eg_donor_uuid = :eg:i_eg_donor_uuid and :eg2:i_eg_account_uuid = :eg:i_eg_account_uuid order by :eg2:i_eg_gift_trx_date desc limit 1)
		where
			:eg:i_eg_processor = 'Stewardship Technology' and
			(:eg:i_eg_gift_pmt_type is null or :eg:i_eg_gift_lastfour is null)
		;

		update
			identity /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows eg,
			wildcard expression ('/apps/kardia/modules/eg_stech/egsapi.http/SelectAccounts?ShowAll=1&DonorGUID=' + :eg:i_eg_donor_uuid + '/Accounts/*') sa
		set
			:eg:i_eg_gift_lastfour = right(isnull(:sa:MaskedCardNumber, :sa:MaskedAccountNumber), 4),
			:eg:i_eg_gift_pmt_type = condition(:sa:Type = 'VISA', 'Visa', condition(lower(:sa:Type) = 'checking' or lower(:sa:Type) = 'savings', 'ACH', condition(:sa:Type = 'MSTR', 'MasterCard', condition(:sa:Type = 'DISC', 'Discover', ''))))
		where
			:sa:AccountGUID =* :eg:i_eg_account_uuid and
			:eg:i_eg_processor = 'Stewardship Technology' and
			(:eg:i_eg_gift_lastfour is null or char_length(:eg:i_eg_gift_lastfour) <= 1) and
			(:eg:i_eg_gift_pmt_type is null or char_length(:eg:i_eg_gift_pmt_type) <= 1)
		";
			
    }
