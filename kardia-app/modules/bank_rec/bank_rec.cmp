$Version=2$
bank_rec "widget/component-decl"
    {
    width=1380;
    height=580;

    ledger "widget/parameter" { type=string; default=null; deploy_to_client=yes; }
    title "widget/parameter" { type=string; default=''; }

    menu_split "widget/vbox" 
	{
	header_box "widget/hbox" 
	    {
	    height=30;
	    rcpt_label "widget/label"
		{
		width=160;
		text = runserver(:this:title); 
		style=bold;
		font_size=16;
		}
	    ledger_label "widget/label"
		{
		width=200;
		y=1;
		text = runserver("| Ledger: "+:this:ledger);
		align=left;
		style=bold;
		}
	    }
	body_split "widget/hbox"
	    {
	    side_box "widget/vbox"
		{
		width=200;

		// GL Accounts Table
		account_osrc "widget/osrc"
		    {
		    acc_ledger "widget/parameter" { type=string; param_name=ledger; default=runclient(:ledger:value); }
		    sql = "
			EXEC /apps/kardia/modules/bank_rec/rec_items_upsert.qy cur_ledger=:parameters:ledger;
			EXEC /apps/kardia/modules/bank_rec/last_bank_rec.qy cur_ledger=:parameters:ledger;
		    ";
		    replicasize=50; 
		    readahead=50;
		    
		    acc_list_header "widget/label"
			{
			height=20; width = 200;
			align=center;
			text='Accounts';
			style=bold;
			font_size=14;
			}
		    acc_list_table "widget/table"
			{
			height=200; width = 200; x=0; y=0;
			t_acc_code "widget/table-column" { title="Acct."; fieldname="a_account_code"; width=15; }
			t_acc_date "widget/table-column" { title="Last Reconciliation"; fieldname="a_end_date"; width=50; }
			}
		    }

		// Reconcilation List Table
		recon_osrc "widget/osrc"
		    {
		    recon_ledger "widget/parameter" { type=string; param_name=a_ledger_number; }
		    recon_account "widget/parameter" { type=string; param_name=a_account_code; }

		    sql = "EXEC /apps/kardia/modules/bank_rec/rec_zeros.qy cur_ledger=:parameters:a_ledger_number, cur_account=:parameters:a_account_code";
		    
		    baseobj = "/apps/kardia/data/Kardia_DB/a_bank_recon/rows";
		    replicasize=50; 
		    readahead=50;

		    account_link "widget/rule"
			{
			ruletype=osrc_relationship;
			target=account_osrc;
			autoquery=true;
			key_1=a_ledger_number;
			target_key_1=a_ledger_number;
			key_2=a_account_code;
			target_key_2=a_account_code;
			}
		    rec_list_header "widget/label"
			{
			height=20; width = 200;
			align=center;
			text='Reconciliation';
			style=bold;
			font_size=14;
			}
		    rec_list_table "widget/table"
			{
			height=300; width=200; x=0; y=0;
			t_rec_date "widget/table-column" { title="End Date"; fieldname="a_display_end_date"; }
			t_rec_diff "widget/table-column" { title="Difference"; fieldname="a_recon_diff"; align='right'; }

			rec_list_detail "widget/table-row-detail"
			    {
			    height = 30; 
			    show_on_new=1;
			    rec_list_pane "widget/pane"
			 	{
			 	x=10; y=5;
			 	height = 20; width=160;
			 	border_radius=5;
			 	style=flat;
			 	bgcolor="#f8f8f8";
				// Confirm prompt for deletes contain the delete:
				rec_list_prompt "widget/childwindow"
				    {
				    x=0; y=0; height=200; width=400;
				    style=dialog;
				    modal=yes;
				    toplevel=yes;
				    visible=false;
				    title="Confirm Delete";

				    prompt_calc_osrc "widget/osrc"
					{
					calc_ledger "widget/parameter" { type=string; param_name=a_ledger_number; }
					calc_account "widget/parameter" { type=string; param_name=a_account_code; }
					calc_statement "widget/parameter" { type=string; param_name=a_statement_id; }

					sql = "
					    SELECT
						cnt = 'Completing this action will unreconcile '+count(1)+' item(s)'
					    FROM
						/apps/kardia/data/Kardia_DB/a_bank_recon_item/rows
					    WHERE 
						:a_ledger_number = :parameters:a_ledger_number
						AND :a_account_code = :parameters:a_account_code
						AND :a_statement_id = :parameters:a_statement_id
						AND :a_is_reconciled
					    ;";
					autoquery=never;
					calc_link "widget/rule"
					    {
					    ruletype=osrc_relationship;
					    target=recon_osrc;
					    autoquery=false;
					    key_1=a_ledger_number;
					    target_key_1=a_ledger_number;
					    key_2=a_account_code;
					    target_key_2=a_account_code;
					    key_3=a_statement_id;
					    target_key_3=a_statement_id;
					    }	
					calc_vbox "widget/vbox"
					    {
					    prompt_message "widget/label"
						{
						height=20; width = 400;
						align=center;
						text='Delete this reconcilation?';
						label_width=120;
						}
					    prompt_calc_form "widget/form"
						{
						f_unrec_cnt "widget/component"
						    {
						    path="/sys/cmp/smart_field.cmp";
						    field = 'cnt';
						    ctl_type=label; 
						    text='';
						    label_width=0;
						    height = 20;
						    }
						}
					    prompt_instructions "widget/label"
						{
						height=20; width = 400;
						align=left;
						text='To delete the reconcilation, please type "DELETE" in the box below:';
						label_width=120;
						}
					    f_unrec_editbox "widget/component"
						{
						path="/sys/cmp/smart_field.cmp";
						ctl_type=editbox; 
						text='';
						label_width=0;
						height = 20;
						}
						
					    f_unrec_buttons_hbox "widget/hbox"
						{
						f_unrec_cancel_btn "widget/textbutton"
						    {
						    x=0; y=0; width=60;
						    text="Cancel";
						    close_rec_prompt1 "widget/connector" { event=Click; target=rec_list_prompt; action=Close; }
						    }
						f_rec_confirm_btn "widget/textbutton"
						    {
						    x=0; y=0; width=60;
						    text="Delete";
						    enabled=runclient(:f_unrec_editbox:value = 'DELETE');
						    close_rec_prompt2 "widget/connector" { event=Click; target=rec_list_prompt; action=Close; }
						    refresh_rec "widget/connector" { event=Click; target=recon_osrc; action=QueryParam; event_delay=0.1; }
						    clear_rec "widget/connector" { event=Click; target=prompt_clear_osrc; action=QueryParam; }
						    }
						}
						
						// privide functionality to clear and delete a reconciliation 
					    prompt_clear_osrc "widget/osrc"
						{
						clear_ledger "widget/parameter" { type=string; param_name=a_ledger_number; }
						clear_account "widget/parameter" { type=string; param_name=a_account_code; }
						clear_statement "widget/parameter" { type=string; param_name=a_statement_id; }

						sql = "EXEC /apps/kardia/modules/bank_rec/rec_clear.qy cur_ledger=:parameters:a_ledger_number, cur_account=:parameters:a_account_code, cur_recon=:parameters:a_statement_id";

						baseobj = "/apps/kardia/data/Kardia_DB/a_bank_recon_item/rows";
						autoquery=never;
						clear_link "widget/rule"
						    {
						    ruletype=osrc_relationship;
						    target=recon_osrc;
						    autoquery=false;
						    key_1=a_ledger_number;
						    target_key_1=a_ledger_number;
						    key_2=a_account_code;
						    target_key_2=a_account_code;
						    key_3=a_statement_id;
						    target_key_3=a_statement_id;
						    }
						}
					    }
					}
				    }
				f_rec_delete_btn "widget/textbutton"
				    {
				    x=0; y=0; width=60;
				    text="Delete";
				    enabled=runclient(NOT :rec_form:is_discardable);
				    form=rec_form;
				    delete_rec_prompt "widget/connector" { event=Click; target=rec_list_prompt; action=Open; event_delay=0.1; }
				    delete_rec_confirm_clear "widget/connector" { event=Click; target=f_unrec_editbox; action=SetValue; Value=runclient(""); }
				    delete_rec_query "widget/connector" { event=Click; target=prompt_calc_osrc; action=QueryParam; }
				    }
				}
			    }
			}
		    }
		}
	
	    main_box "widget/vbox"
		{
		// Reconciliation Form
		rec_pane "widget/pane"
		    {
		    x=5; y=0; height=100;
		    style="bordered";
		    bgcolor = "#d0d0d0";
		    border_color = "#abcdef";

		    rec_form "widget/form"
			{
			objectsource = recon_osrc;
			rec_form_box "widget/vbox"
			    {
			    y=10;
			    rec_top_row_box "widget/hbox" 
				{
				x=300; height=30;
			// TODO: if no match prev, flag it
				f_rec_start_bal "widget/component"
				    {
				    height=20; width = 300;
				    path="/sys/cmp/smart_field.cmp";
				    field = 'a_bank_start_balance';
				    ctl_type=editbox; 
				    text='Start Balance:';
				    label_width=120;
				    }
				f_rec_amt "widget/component"
				    {
				    height=20; width = 300;
				    path="/sys/cmp/smart_field.cmp";
				    field = 'a_recon_amt';
				    ctl_type=label; 
				    text='Reconcile Amount:';
				    label_width=120;
				    }
				}
			    rec_mid_row_box "widget/hbox"
				{
				x=0; y=40; height=30; width=1000;

				f_rec_end_date "widget/component"
				    {
				    height = 20; width = 300;
				    path="/sys/cmp/smart_field.cmp";
				    field = 'a_end_date';
				    ctl_type=datetime; 
				    text='End Date:';
				    label_width=120;
				    }
				f_rec_end_bal "widget/component"
				    {
				    height = 20; width = 300;
				    path="/sys/cmp/smart_field.cmp";
				    field = 'a_bank_end_balance';
				    ctl_type=editbox; 
				    text='End Balance:';
				    label_width=120;
				    }
				f_rec_diff "widget/component"
				    {
				    height = 20; width = 300;
				    path="/sys/cmp/smart_field.cmp";
				    field = 'a_recon_diff';
				    ctl_type=label; 
				    text='Difference:';
				    label_width=120;
				    }
				}
			    rec_bot_row_box "widget/hbox" 
				{
				height=30;
				width=1000;
				f_rec_comment "widget/component"
				    {
				    height = 20; width = 600;
				    path="/sys/cmp/smart_field.cmp";
				    field = 'a_comment';
				    ctl_type=editbox; 
				    text='Comment:';
				    label_width=120;
				    }
				f_rec_new_btn "widget/textbutton"
				    {
				    width=80;
				    text = "New";
				    enabled=runclient(:rec_form:is_newable);
				    new_rec "widget/connector" { event=Click; target=rec_form; action=New; }
				    }
			
			// TODO: new items need to be able to handle ledger, account, statement, and period 
				f_rec_save_btn "widget/textbutton"
				    {
				    width=80;
				    text = "Save";
				    enabled = runclient(:rec_form:is_savable);

				    f_rec_save "widget/connector" { event=Click; target=rec_form; action=Save; }
				    }
			// TODO: warn if the coresponding period does not exist 
				f_rec_cancel_btn "widget/textbutton"
				    {
				    width=80;
				    text = "Cancel";
				    enabled = runclient(:rec_form:is_discardable);

				    f_rec_cancel "widget/connector" { event=Click; target=rec_form; action=Discard; }
				    }
				}
			    // fields abstracted from the user
			    f_rec_meta_period "widget/variable" { fieldname="a_period"; meta_period_hints "widget/hints" { default=runclient('oooof'); } }
			    f_rec_meta "widget/component" { path="/apps/kardia/modules/base/record_metadata_hidden.cmp"; }
			    
			    period_update_osrc "widget/osrc"
			    	{
				period_date "widget/parameter" { type=datetime; }
				sql="
				    SELECT
					a_period = first(:a_period) 
				    FROM 
					/apps/kardia/data/Kardia_DB/a_period/rows 
				    WHERE 
					:parameters:period_date <= :a_end_date
					AND :parameters:period_date >= :a_start_date
					AND :a_parent_period IS NOT NULL
				    ;";
				autoquery=never;
				}
			    // keep the period field up to date by runing query on change and setting value after
			    f_rec_find_period "widget/connector" 
				{
				source=f_rec_end_date;
				target=period_update_osrc;
				event=DataChange;
				action=QueryParam;
				period_date=runclient(:f_rec_end_date:value);
				}
			    f_rec_set_period "widget/connector" 
				{
				source=period_update_osrc;
				target=f_rec_meta_period;
				event=EndQuery;
				action=SetValue;
				Value=runclient(:period_update_osrc:a_period);
				}

			    }
			}
		    }
		
		// Line Item Table
		item_osrc "widget/osrc" 
		    {
		    item_ledger "widget/parameter" { type=string; param_name=a_ledger_number; }
		    item_account "widget/parameter" { type=string; param_name=a_account_code; }
		    item_statement "widget/parameter" { type=string; param_name=a_statement_id; }

		    sql = "EXEC /apps/kardia/modules/bank_rec/rec_items.qy cur_ledger=:parameters:a_ledger_number, cur_account=:parameters:a_account_code, cur_recon=:parameters:a_statement_id";

		    baseobj = "/apps/kardia/data/Kardia_DB/a_bank_recon_item/rows";
		    replicasize=50; 
		    readahead=50;
		    recon_link "widget/rule"
			{
			ruletype=osrc_relationship;
			target=recon_osrc;
			autoquery=true;
			key_1=a_ledger_number;
			target_key_1=a_ledger_number;
			key_2=a_account_code;
			target_key_2=a_account_code;
			key_3=a_statement_id;
			target_key_3=a_statement_id;
			}

		    rec_item_table "widget/table"
			{
			height=450;  x=0; y=0;
			t_rec_src_key "widget/table-column" { title="Source Key"; fieldname="a_display_key"; width=10; }
			t_rec_posted "widget/table-column" { title="Date Posted"; fieldname="a_date_posted"; width=10; }
			t_rec_gl_comment "widget/table-column" { title="Source Comment"; fieldname="a_src_comment"; width=30; }
			t_rec_rec_comment "widget/table-column" { title="Reconciliation Comment"; fieldname="a_comment"; width=30; }
			t_rec_debit "widget/table-column" { title="Debit (+)"; fieldname="a_debit"; align='right'; width=10; }
			t_rec_credit "widget/table-column" { title="Credit (-)"; fieldname="a_credit"; align='right'; textcolor=runclient('#ff0000'); width=10; }
			t_rec_isrec "widget/table-column" { type="image"; title="rec?"; fieldname="a_is_reconciled"; width=5; 
			    // select the proper image depending on value and if is clickable
			    value=runclient(
				condition(:item_osrc:a_is_reconciled  >= 1, 
				    condition(has_endorsement('kardia:recon_perform', 'kardia:ledger:' + :ledger:value + ":"),
					'/sys/images/checkbox_checked.gif',
					'/sys/images/checkbox_checked_dis.gif'
					),
				    condition(has_endorsement('kardia:recon_perform', 'kardia:ledger:' + :ledger:value + ":"),
					'/sys/images/checkbox_unchecked.gif',
					'/sys/images/checkbox_unchecked_dis.gif'
					)
				    )
				);
			    }
			rec_shortcut "widget/connector"
			    {
			    event=Click; target=item_osrc; action=Modify;
			    a_is_reconciled=runclient(condition(:item_osrc:a_is_reconciled = 1, 0, 1));
			    a_statement_id=runclient(:item_osrc:a_statement_id); // gets overwritten by the rule, but set it correctly anyway 
			    event_condition=runclient(:Column == 'a_is_reconciled' AND has_endorsement('kardia:recon_perform', 'kardia:ledger:' + :ledger:value + ":")); 
			    }
			short_update_acc "widget/connector" 
			    {
			    event=Click; target=recon_osrc; action=Refresh; event_delay=runclient(0.1);
			    event_condition=runclient(:Column == 'a_is_reconciled' AND has_endorsement('kardia:recon_perform', 'kardia:ledger:' + :ledger:value + ":"));
			    }
			rec_item_detail "widget/table-row-detail"
			    {
			    height = 30; 
			    show_on_new=0;
			    display_for=runclient(:item_osrc:a_origin is null);

			    rec_item_pane "widget/pane"
			 	{
			 	x=10; y=5;
			 	height = 20; width=1000;
			 	border_radius=5;
			 	style=flat;
			 	bgcolor="#f8f8f8";
				}
			    }
			}
		    }
		}
	    }
	}
    }
