$Version=2$
plugin_rcpt_importprocess_050splitTrx "system/query"
    {
    module_sequence=001; // run first thing
    module_letter='O';
    module_code='Obfuscate';
    module_desc='Obfuscate incoming financial data to facilitate testing. USE ONLY FOR TESTING.';
    // just an example of how to specify a module config component:
    // module_config_cmp='/apps/kardia/modules/rcpt/field_donor_with_new.cmp';

    ledger "query/parameter" { type=string; }

    sql = "
		-- get the name and address exceptions 
		DECLARE OBJECT key;
		SELECT
		    :key:value = isnull(
			(
			select first(:a_config_value) 
			from /apps/kardia/data/Kardia_DB/a_config/rows 
			where :a_config_name='EG_ObsKey'
			), 'hello_world')
		;

		-- obfuscate financial data. Anything generated by Kardia or which is non sensitive can be left as is.
		DECLARE COLLECTION obfuscated;
		INSERT INTO
		    COLLECTION obfuscated
		SELECT 
		    old_trx_id = :i_eg_trx_uuid,
		    old_desig_id = :i_eg_desig_uuid,
		    :a_ledger_number,
		    :i_eg_line_item,
		    i_eg_gift_uuid = obfuscate(:i_eg_gift_uuid, :key:value, 'i_eg_gift_uuid'),
		    i_eg_desig_uuid = obfuscate(:i_eg_desig_uuid, :key:value, 'i_eg_desig_uuid'),
		    i_eg_trx_uuid = obfuscate(:i_eg_trx_uuid, :key:value, 'i_eg_trx_uuid'),
		    i_eg_donor_uuid = obfuscate(:i_eg_donor_uuid, :key:value, 'i_eg_donor_uuid'),
		    i_eg_donor_alt_id = obfuscate(:i_eg_donor_alt_id, :key:value, 'i_eg_donor_alt_id'),
		    i_eg_account_uuid  = obfuscate(:i_eg_account_uuid, :key:value, 'i_eg_account_uuid'),
		    i_eg_donor_name = NULL, -- will overwrite later
		    i_eg_donor_given_name = obfuscate(:i_eg_donor_given_name, :key:value, 'i_eg_donor_given_name'),
		    i_eg_donor_surname = obfuscate(:i_eg_donor_surname, :key:value, 'i_eg_donor_surname'),
		    i_eg_donor_middle_name = obfuscate(:i_eg_donor_middle_name, :key:value, 'i_eg_donor_middle_name'),
		    i_eg_donor_prefix = obfuscate(:i_eg_donor_prefix, :key:value, 'i_eg_donor_prefix'),
		    i_eg_donor_suffix = obfuscate(:i_eg_donor_suffix, :key:value, 'i_eg_donor_suffix'),
		    i_eg_donor_address = NULL, -- overwrite with real value later
		    i_eg_donor_addr1 = obfuscate(:i_eg_donor_addr1, :key:value, 'i_eg_donor_addr1'),
		    i_eg_donor_addr2 = obfuscate(:i_eg_donor_addr2, :key:value, 'i_eg_donor_addr2'),
		    i_eg_donor_addr3 = obfuscate(:i_eg_donor_addr3, :key:value, 'i_eg_donor_addr3'),
		    i_eg_donor_city = obfuscate(:i_eg_donor_city, :key:value, 'i_eg_donor_city'),
		    i_eg_donor_state = obfuscate(:i_eg_donor_state, :key:value, 'i_eg_donor_state'),
		    i_eg_donor_postal = obfuscate(:i_eg_donor_postal, :key:value, 'i_eg_donor_postal'),
		    i_eg_donor_country = obfuscate(:i_eg_donor_country, :key:value, 'i_eg_donor_country'),
		    i_eg_donor_phone = obfuscate(:i_eg_donor_phone, :key:value, 'i_eg_donor_phone'), -- unlikely to have area code/line to combone
		    i_eg_donor_phone_country = obfuscate(:i_eg_donor_phone_country, :key:value, 'i_eg_donor_phone_country'),
		    i_eg_donor_phone_area = obfuscate(:i_eg_donor_phone_area, :key:value, 'i_eg_donor_phone_area'),
		    i_eg_donor_phone_line = obfuscate(:i_eg_donor_phone_line, :key:value, 'i_eg_donor_phone_line'),
		    i_eg_donor_phone_ext = obfuscate(:i_eg_donor_phone_ext, :key:value, 'i_eg_donor_phone_ext'),
		    i_eg_donor_email = obfuscate(:i_eg_donor_email, :key:value, 'i_eg_donor_email'),
		    i_eg_gift_amount = obfuscate(:i_eg_gift_amount, :key:value, 'i_eg_gift_amount'),
		    i_eg_gift_currency_foreign_amt = obfuscate(:i_eg_gift_currency_foreign_amt, :key:value, 'i_eg_gift_currency_foreign_amt'),
		    i_eg_gift_currency = obfuscate(:i_eg_gift_currency, :key:value, 'i_eg_gift_currency'), 
		    i_eg_gift_currency_date = obfuscate(:i_eg_gift_currency_date, :key:value, 'i_eg_gift_currency_date'),
		    i_eg_gift_currency_exch_rate = obfuscate(:i_eg_gift_currency_exch_rate, :key:value, 'i_eg_gift_currency_exch_rate'),
		    i_eg_gift_pmt_type = obfuscate(:i_eg_gift_pmt_type, :key:value, 'i_eg_gift_pmt_type'),
		    i_eg_gift_lastfour = obfuscate(:i_eg_gift_lastfour, :key:value, 'i_eg_gift_lastfour'),
		    i_eg_gift_interval = obfuscate(:i_eg_gift_interval, :key:value, 'i_eg_gift_interval'), -- consider transforming into one of the actual options
		    i_eg_gift_count = obfuscate(:i_eg_gift_count, :key:value, 'i_eg_gift_count'),
		    i_eg_desig_name = obfuscate(:i_eg_desig_name, :key:value, 'i_eg_desig_name'),
		    i_eg_desig_notes = obfuscate(:i_eg_desig_notes, :key:value, 'i_eg_desig_notes'),
		    i_eg_net_amount = obfuscate(:i_eg_net_amount, :key:value, 'i_eg_net_amount'), 
		    i_eg_deposit_uuid = obfuscate(:i_eg_deposit_uuid, :key:value, 'i_eg_deposit_uuid'),
		    i_eg_contra_deposit_uuid = obfuscate(:i_eg_contra_deposit_uuid, :key:value, 'i_eg_contra_deposit_uuid'),
		    i_eg_deposit_gross_amt = convert('money', NULL), -- agregate later
		    i_eg_deposit_amt = convert('money', NULL), -- agregate later
		    i_eg_is_donorfee = obfuscate(:i_eg_is_donorfee, :key:value, 'i_eg_is_donorfee'),
		    i_eg_postprocess =  substring(:i_eg_postprocess, 2, 99), -- no longer needs marked
		    p_donor_partner_key = obfuscate(:p_donor_partner_key, :key:value, 'p_donor_partner_key'),
		    *
		FROM
		    /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows
		WHERE
		    substring(:i_eg_postprocess, 1, 1) = 'O'
		;
		
		-- sum up the transaction totals
		DECLARE COLLECTION totals;
		INSERT INTO
		    COLLECTION totals
		SELECT
		    gross = sum(:i_eg_gift_amount),
		    net = sum(:i_eg_net_amount),
		    :i_eg_trx_uuid
		FROM
		    COLLECTION obfuscated 
		GROUP BY
		    :i_eg_trx_uuid
		;

		UPDATE 
		    IDENTITY COLLECTION obfuscated o,
		    COLLECTION totals t
		SET
		    :o:i_eg_donor_phone = condition(char_length(:o:i_eg_donor_phone_area) > 1 
				AND char_length(:o:i_eg_donor_phone_line) > 1,
			isnull(:o:i_eg_donor_phone_country+' ', '')+:o:i_eg_donor_phone_area+:o:i_eg_donor_phone_line
				+isnull(:o:i_eg_donor_phone_ext, ' '+:o:i_eg_donor_phone_ext, ''),
			:o:i_eg_donor_phone),
		    :o:i_eg_donor_address = isnull(:o:i_eg_donor_addr1+' ', '') + isnull(:o:i_eg_donor_addr2+' ', '')
			+ isnull(:o:i_eg_donor_addr3+' ', '') + isnull(:o:i_eg_donor_city+' ', '') 
			+ isnull(:o:i_eg_donor_state+' ', '') + isnull(:o:i_eg_donor_postal+' ','') 
			+ isnull(:o:i_eg_donor_country+' ',''),
		    :o:i_eg_donor_name = isnull(:o:i_eg_donor_given_name+' ','') + isnull(:o:i_eg_donor_middle_name+' ','')
			+ isnull(:o:i_eg_donor_surname+' ','') + isnull(:o:i_eg_donor_suffix+' ',''),
		    :o:i_eg_deposit_amt = :t:net,
		    :o:i_eg_deposit_gross_amt = :t:gross
		WHERE 
		    :o:i_eg_trx_uuid = :t:i_eg_trx_uuid
		;

		-- to handle duplicates, perform as an insert and then delete 
		INSERT INTO
		    /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows
		SELECT
		    * 
		FROM 
		    COLLECTION obfuscated o
		ON DUPLICATE
		    :a_ledger_number, :i_eg_trx_uuid, :i_eg_desig_uuid, :i_eg_line_item
		UPDATE SET
		    :i_eg_deposit_date = :o:i_eg_deposit_date,
		    :i_eg_deposit_uuid = :o:i_eg_deposit_uuid,
		    :i_eg_deposit_gross_amt = :o:i_eg_deposit_gross_amt,
		    :i_eg_deposit_amt = :o:i_eg_deposit_amt,
		    :i_eg_net_amount = :o:i_eg_net_amount,
		    :i_eg_desig_notes = :o:i_eg_desig_notes,
		    :i_eg_status = :o:i_eg_status,
		    :i_eg_returned_status = :o:i_eg_returned_status,
		    :i_eg_gift_settlement_date = :o:i_eg_gift_settlement_date,
		    :s_date_modified = getdate() IF MODIFIED,
		    :s_modified_by = user_name() IF MODIFIED
		; 

		DELETE FROM 
		    IDENTITY /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows i,
		    COLLECTION obfuscated o
		WHERE
		    :i:i_eg_trx_uuid = :o:old_trx_id
		    AND :i:i_eg_desig_uuid = :o:old_desig_id
		    AND :i:a_ledger_number = :o:a_ledger_number
		    AND :i:i_eg_line_item = :o:i_eg_line_item
		;
    ";
    }