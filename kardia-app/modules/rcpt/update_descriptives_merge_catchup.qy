$Version=2$
update_descriptives_merge_catchup "system/query"
    {
    fund "query/parameter" { type=string; style=strnull;}
    donor "query/parameter" { type=string; style=strnull;}

    sql = " declare collection tmp_gift_items scope application;
    
	    -- Merge in 'catch up' giving.  dh1 is the larger catch up amount, and dh2 is
	    -- the regular giving.

	    -- Step One: Locate
	    --print 'donghwanHwang'

	    --select * from collection a_descriptives_hist;	

	    update
		identity collection a_descriptives_hist dh1,
		collection a_descriptives_hist dh2
	    set
		--:a_merged_id = 999999
		--:a_merged_id = :dh2:a_hist_id
		:a_merged_id = isnull(:dh2:a_merged_id, :dh2:a_hist_id)
	    where
		(:parameters:fund is null or :parameters:fund = :dh2:a_fund) and
		(:parameters:donor is null or :parameters:donor = :dh2:p_donor_partner_key) and
		:dh2:a_ledger_number = :dh1:a_ledger_number and
		:dh2:a_fund = :dh1:a_fund and
		:dh2:p_donor_partner_key = :dh1:p_donor_partner_key and
		:dh1:a_amount <= 8 * :dh2:a_amount and -- catchup more than regular within reason
		(:dh1:a_amount / :dh2:a_amount) = round(:dh1:a_amount / :dh2:a_amount, 0) and -- even multiple of regular
		round(:dh2:a_act_average_interval) <= round(isnull(:dh1:a_act_average_interval, 100)) and -- regular is more often than catchup
		:dh2:a_count > :dh1:a_count and -- regular has more gifts than catchup
		:dh2:a_count >= 2 and -- regular has at least 2 gifts
		:dh2:a_first_gift < :dh2:a_last_gift and -- regular gifts are not on the same day
		round(:dh2:a_act_average_interval, 0) != 0 and -- regular has an established interval (non-zero)
		(:dh1:a_last_gift = :dh2:a_prev_end or :dh2:a_last_gift = :dh1:a_prev_end) and -- gifts are adjacent	
		datediff(month, condition(:dh1:a_last_gift < :dh2:a_last_gift, :dh1:a_last_gift, :dh2:a_last_gift), condition(:dh1:a_first_gift > :dh2:a_first_gift, :dh1:a_first_gift, :dh2:a_first_gift)) <= 14 and
                 --checks that the average giving stays similar after the merge would occur
		(:dh1:a_total + :dh2:a_total - :dh2:a_amount) / round(datediff(day, condition(:dh1:a_first_gift < :dh2:a_first_gift, :dh1:a_first_gift, :dh2:a_first_gift), condition(:dh1:a_last_gift > :dh2:a_last_gift, :dh1:a_last_gift, :dh2:a_last_gift)) / 30.5) > 0.85 * isnull(:dh2:a_act_average_amount, :dh2:a_amount) and
       		(:dh1:a_total + :dh2:a_total - :dh2:a_amount) / round(datediff(day, condition(:dh1:a_first_gift < :dh2:a_first_gift, :dh1:a_first_gift, :dh2:a_first_gift), condition(:dh1:a_last_gift > :dh2:a_last_gift, :dh1:a_last_gift, :dh2:a_last_gift)) / 30.5) < 1.15 * isnull(:dh2:a_act_average_amount, :dh2:a_amount)
	    ;
	    --select :p_donor_partner_key, :a_fund, :a_hist_id, :a_merged_id  from collection a_descriptives_hist; 
	    	

	    print 'FULLY TESTED'
	    -- Step Two: Merge
	    update
		identity collection a_descriptives_hist dh2,
		collection a_descriptives_hist dh1
	    set
                :dh2:a_count = :dh2:a_count + :dh1:a_count,
		:dh2:a_total = :dh2:a_total + :dh1:a_total,
                :dh2:a_prev_end = condition(
                                :dh1:a_prev_end is null,
                                null,
                                condition(:dh1:a_prev_end < :dh2:a_prev_end, :dh1:a_prev_end, :dh2:a_prev_end)
                                ),
		:dh2:a_next_start = condition(
                                :dh1:a_next_start is null,
                                null,
                                condition(:dh1:a_next_start > :dh2:a_next_start, :dh1:a_next_start, :dh2:a_next_start)
                                ),
                :dh2:a_ntl_gift = condition(
                                :dh1:a_ntl_gift is null,
                                condition(:dh2:a_last_gift < :dh1:a_last_gift, :dh2:a_last_gift, :dh2:a_ntl_gift),  
                                condition(:dh1:a_ntl_gift < :dh2:a_ntl_gift, :dh2:a_ntl_gift, :dh1:a_ntl_gift)
                                ),
                :dh2:a_first_gift = condition(:dh1:a_first_gift > :dh2:a_first_gift, :dh2:a_first_gift, :dh1:a_first_gift),
		:dh2:a_last_gift = condition(:dh1:a_last_gift < :dh2:a_last_gift, :dh2:a_last_gift, :dh1:a_last_gift),
                :dh2:a_act_average_amount = condition(
                                datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) < 16,
                                null,
                                (:dh2:a_total - :dh2:a_amount) / round(datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5)
                                ),
                :dh2:a_act_average_months = convert(integer, round(datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5)),
                :dh2:a_act_average_interval = condition(
                                :dh2:a_count = 1 or datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) = 0,
                                null,
                                (datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5) / (:dh2:a_total / :dh2:a_amount - 1)
                                )
	    where
		(:parameters:fund is null or :parameters:fund = :dh2:a_fund) and
		(:parameters:donor is null or :parameters:donor = :dh2:p_donor_partner_key) and
		:dh2:a_ledger_number = :dh1:a_ledger_number and
		:dh2:a_fund = :dh1:a_fund and
		:dh2:p_donor_partner_key = :dh1:p_donor_partner_key and
		:dh1:a_merged_id = :dh2:a_hist_id
	    ;

	    -- Step Three: Delete Merged
	    delete
		collection a_descriptives_hist dh1
	    where
		(:parameters:fund is null or :parameters:fund = :dh1:a_fund) and
		(:parameters:donor is null or :parameters:donor = :dh1:p_donor_partner_key) and
		:dh1:a_merged_id is not null
	    ";
    }
