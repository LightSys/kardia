$Version=2$
update_descriptives_merge_catchup_with_extra "system/query"
    {
    fund "query/parameter" { type=string; style=strnull;}
    donor "query/parameter" { type=string; style=strnull;}

    sql = " declare collection tmp_gift_items scope application;
            declare collection tmp_intermediate_vals;

            delete collection tmp_intermediate_vals;

	    -- Merge in 'catch up' giving.  dh1 is the larger catch up amount, and dh2 is
	    -- the regular giving. There is a possible extra amount included in this giving

	    -- Step One: Locate
	    update
		identity collection a_descriptives_hist dh1,
		collection a_descriptives_hist dh2
	    set
		:a_merged_id = isnull(:dh2:a_merged_id, :dh2:a_hist_id),
                :a_is_extra = 2
	    where
		(:parameters:fund is null or :parameters:fund = :dh2:a_fund) and
		(:parameters:donor is null or :parameters:donor = :dh2:p_donor_partner_key) and
		:dh2:a_ledger_number = :dh1:a_ledger_number and
		:dh2:a_fund = :dh1:a_fund and
		:dh2:p_donor_partner_key = :dh1:p_donor_partner_key and
		:dh2:a_amount < :dh1:a_amount and -- catchup more than regular
		:dh2:a_act_average_interval < isnull(:dh1:a_act_average_interval, 100) and -- regular is more often than catchup
		:dh1:a_count = 1 and -- extra has a single gift
		:dh2:a_count >= 2 and -- regular has at least 2 gifts
                :dh1:a_prev_end is not null and -- extra is not first gift
		:dh2:a_first_gift < :dh2:a_last_gift and -- regular gifts are not on the same day
		round(:dh2:a_act_average_interval, 0) != 0 and -- regular has an established interval (non-zero)
		(:dh1:a_last_gift = :dh2:a_prev_end or :dh2:a_last_gift = :dh1:a_prev_end) and -- gifts are adjacent
		datediff(month, condition(:dh1:a_last_gift < :dh2:a_last_gift, :dh1:a_last_gift, :dh2:a_last_gift), condition(:dh1:a_first_gift > :dh2:a_first_gift, :dh1:a_first_gift, :dh2:a_first_gift)) <= 14 and
		-- This checks that the average giving will change only within a controlled range.
                --      moderately greater after the merge occurs.
                --      'moderately greater' is acceptable because it is not known how much of the gift is extra and 
                --      how much is a part of regular giving
                (:dh1:a_total + :dh2:a_total - :dh2:a_amount) / round(datediff(day, condition(:dh1:a_first_gift < :dh2:a_first_gift, :dh1:a_first_gift, :dh2:a_first_gift), condition(:dh1:a_last_gift > :dh2:a_last_gift, :dh1:a_last_gift, :dh2:a_last_gift)) / 30.5) > 0.85 * (condition(:dh1:a_count > :dh2:a_count, isnull(:dh1:a_act_average_amount, :dh1:a_amount), isnull(:dh2:a_act_average_amount, :dh2:a_amount))) and
                (:dh1:a_total + :dh2:a_total - :dh2:a_amount) / round(datediff(day, condition(:dh1:a_first_gift < :dh2:a_first_gift, :dh1:a_first_gift, :dh2:a_first_gift), condition(:dh1:a_last_gift > :dh2:a_last_gift, :dh1:a_last_gift, :dh2:a_last_gift)) / 30.5) < 3.00 * (condition(:dh1:a_count > :dh2:a_count, isnull(:dh1:a_act_average_amount, :dh1:a_amount), isnull(:dh2:a_act_average_amount, :dh2:a_amount))) and
                (select count(1) from collection tmp_gift_items where :donor = :dh1:p_donor_partner_key and :ledger = :dh1:a_ledger_number and :fund = :dh1:a_fund and :giftdate > dateadd(day, convert(integer, round(-0.5 * 30.5 * :dh2:a_act_average_interval)), :dh1:a_first_gift) and :giftdate < dateadd(day, convert(integer, round(.5 * 30.5 * :dh2:a_act_average_interval)), :dh1:a_first_gift)) = 1
                -- check if only 1 gift within +/- half an interval of extra giving 
		--((:dh1:a_amount / :dh2:a_amount) != round(:dh1:a_amount / :dh2:a_amount, 0) or :dh1:a_hist_id != 1) -- first history value could be a pay-in-advance gift
	    ;

            --Step Two : Create Intermediate Values
            insert
                collection tmp_intermediate_vals
            select
                ledger = :dh1:a_ledger_number,
                fund = :dh1:a_fund,
                donor = :dh1:p_donor_partner_key,
                merged_id = :dh1:a_hist_id,
                regular_id = :dh2:a_hist_id,
                --this catchup_amount logic is not fully functional.
                --It either needs improvement on the logic or needs different method to check for catchup_amount inside extra giving.
                --changing "<=" in front of "truncate(:dh1:a_amount / :dh2:a_amount))" to ">=" in order to improve the logic, merges few more rows.
                --However, some interval values shifts greatly after changing the condition
                -- needs more analysis on the datasets to improve the logic

                --if the extra gift contain bigger or equal to gift amount expected in the time interval,
                --it is considered catch_up gift and truncated as an catchup gift. 
                --Else, if it is false, it is given a value of 0.
                catchup_amount = condition(round((datediff(day, condition(:dh1:a_first_gift < :dh2:a_first_gift, :dh1:a_first_gift, :dh1:a_prev_end), condition(:dh1:a_first_gift < :dh2:a_first_gift, :dh1:a_next_start, :dh1:a_first_gift)) / 30.5) / ((round(:dh2:a_act_average_interval) + :dh2:a_act_average_interval) / 2) <= truncate(:dh1:a_amount / :dh2:a_amount)), round((datediff(day, condition(:dh1:a_first_gift < :dh2:a_first_gift, :dh1:a_first_gift, :dh1:a_prev_end), condition(:dh1:a_first_gift < :dh2:a_first_gift, :dh1:a_next_start, :dh1:a_first_gift)) / 30.5) / ((round(:dh2:a_act_average_interval) + :dh2:a_act_average_interval) / 2) <= truncate(:dh1:a_amount / :dh2:a_amount)), truncate(:dh1:a_amount / :dh2:a_amount)) * :dh2:a_amount,
                --use this condition to filter catchup gift from extra giving to update the count for regular giving
                count = condition(
                        catchup_amount = :dh1:a_amount,
                        :dh1:a_count,
                        0
                        )
            from
                collection a_descriptives_hist dh1,
                collection a_descriptives_hist dh2
            where
                (:parameters:fund is null or :parameters:fund = :dh2:a_fund) and
		(:parameters:donor is null or :parameters:donor = :dh2:p_donor_partner_key) and
		:dh2:a_ledger_number = :dh1:a_ledger_number and
		:dh2:a_fund = :dh1:a_fund and
		:dh2:p_donor_partner_key = :dh1:p_donor_partner_key and
		:dh1:a_merged_id = :dh2:a_hist_id
            ;

	    -- Step Three: Merge
	    update
		identity collection a_descriptives_hist dh2,
		collection a_descriptives_hist dh1,
                collection tmp_intermediate_vals t
	    set
                :dh2:a_count = :dh2:a_count + :t:count,
		:dh2:a_total = :dh2:a_total + :t:catchup_amount,
                :dh2:a_prev_end = condition(
                                :dh1:a_prev_end is null,
                                null,
                                condition(:dh1:a_prev_end < :dh2:a_prev_end, :dh1:a_prev_end, :dh2:a_prev_end)
                                ),
		:dh2:a_next_start = condition(
                                :dh1:a_next_start is null,
                                null,
                                condition(:dh1:a_next_start > :dh2:a_next_start, :dh1:a_next_start, :dh2:a_next_start)
                                ),
                :dh2:a_ntl_gift = condition(
                                :dh1:a_ntl_gift is null, 
                                condition(:dh2:a_last_gift < :dh1:a_last_gift, :dh2:a_last_gift, :dh2:a_ntl_gift), 
                                condition(:dh1:a_ntl_gift < :dh2:a_ntl_gift, :dh2:a_ntl_gift, :dh1:a_ntl_gift)
                                ),
                :dh2:a_first_gift = condition(:dh1:a_first_gift > :dh2:a_first_gift, :dh2:a_first_gift, :dh1:a_first_gift),
		:dh2:a_last_gift = condition(:dh1:a_last_gift < :dh2:a_last_gift, :dh2:a_last_gift, :dh1:a_last_gift),
                :dh2:a_act_average_amount = condition(
                                datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) < 16,
                                null,
                                (:dh2:a_total - :dh2:a_amount) / round(datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5)
                                ),
                :dh2:a_act_average_months = convert(integer, round(datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5)),
                :dh2:a_act_average_interval = condition(
                                :dh2:a_count = 1 or datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) = 0,
                                null,
                                (datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5) / (:dh2:a_total / :dh2:a_amount - 1)
                                )
	    where
		(:parameters:fund is null or :parameters:fund = :dh2:a_fund) and
		(:parameters:donor is null or :parameters:donor = :dh2:p_donor_partner_key) and
		:dh2:a_ledger_number = :dh1:a_ledger_number and
		:dh2:a_fund = :dh1:a_fund and
		:dh2:p_donor_partner_key = :dh1:p_donor_partner_key and
		:dh1:a_merged_id = :dh2:a_hist_id and 
                :t:ledger = :dh1:a_ledger_number and
                :t:fund = :dh1:a_fund and
                :t:donor = :dh1:p_donor_partner_key and
                :t:merged_id = :dh1:a_hist_id and
                :t:regular_id = :dh2:a_hist_id
	    ;

            -- Step Four: Update Merged
            update
		identity collection a_descriptives_hist dh1,
                collection tmp_intermediate_vals t
	    set
		:dh1:a_total = :dh1:a_total - :t:catchup_amount,
                :dh1:a_amount = :dh1:a_amount - :t:catchup_amount,
                :dh1:a_merged_id = null,
                :dh1:a_is_extra = 1
        --extra giving that has been merged already
	    where
		(:parameters:fund is null or :parameters:fund = :dh1:a_fund) and
		(:parameters:donor is null or :parameters:donor = :dh1:p_donor_partner_key) and
                :t:ledger = :dh1:a_ledger_number and
                :t:fund = :dh1:a_fund and
                :t:donor = :dh1:p_donor_partner_key and
                :t:merged_id = :dh1:a_hist_id
	    ;


	    -- Step Five: Delete Merged
	    delete
		collection a_descriptives_hist dh1
	    where
		(:parameters:fund is null or :parameters:fund = :dh1:a_fund) and
		(:parameters:donor is null or :parameters:donor = :dh1:p_donor_partner_key) and
		:dh1:a_is_extra and
        --same as a_is_extra =2
                :dh1:a_amount = 0
	    ";
    }
