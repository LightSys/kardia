$Version=2$
plugin_rcpt_importprocess_050splitTrx "system/query"
    {
    module_sequence=50; // want to run before matching
    module_letter='S';
    module_code='Split';
    module_desc='Split combined gifts comming from bill pay transactions';
    // just an example of how to specify a module config component:
    // module_config_cmp='/apps/kardia/modules/rcpt/field_donor_with_new.cmp';

    ledger "query/parameter" { type=string; }

    sql = "
		-- find the designation 
		DECLARE OBJECT splitDesig;
		SELECT
		    :splitDesig:value = 
			(
			select first(:a_config_value)
			from /apps/kardia/data/Kardia_DB/a_config/rows
			where :a_config_name = 'EgSplitDesig'
			)
		;

		-- Find all of the marked queries, split them into multiple, and insert into collection
		DECLARE COLLECTION split;
		INSERT INTO 
		    COLLECTION split
		SELECT 
		    :i:i_eg_gift_uuid,
		    i_eg_desig_uuid = :t:i_eg_target_desig_uuid,
		    --:i:i_eg_desig_uuid, -- TODO: need to find a wet to let desig be the same without messing up net values on updates
		    i_eg_line_item = :t:i_eg_line_item,
		    :i:i_eg_trx_uuid,
		    i_eg_donor_uuid = substring(replace(:i:i_eg_donor_uuid, ' ', ''), 1, charindex('|', replace(:i:i_eg_donor_uuid, ' ', '')) - 1),
		    i_eg_donor_alt_id = substring(replace(:i:i_eg_donor_uuid, ' ', ''), 1, charindex('|', replace(:i:i_eg_donor_uuid, ' ', '')) - 1),
		    :i:i_eg_account_uuid,
		    :i:i_eg_status,
		    :i:i_eg_returned_status,
		    :i:i_eg_donor_name,
		    :i:i_eg_donor_given_name,
		    :i:i_eg_donor_surname,
		    :i:i_eg_donor_middle_name, 
		    :i:i_eg_donor_address,
		    :i:i_eg_donor_addr1,
		    :i:i_eg_donor_addr2,
		    :i:i_eg_donor_city,
		    :i:i_eg_donor_state,
		    :i:i_eg_donor_postal,
		    :i:i_eg_donor_country,
		    :i:i_eg_donor_phone,
		    :i:i_eg_donor_email,
		    i_eg_gift_amount = :t:i_eg_gift_amount,
		    i_eg_net_amount = :t:i_eg_gift_amount,
		    :i:i_eg_deposit_gross_amt,
		    :i:i_eg_deposit_amt,
		    :i:i_eg_deposit_date,
		    :i:i_eg_deposit_status, 
		    :i:i_eg_deposit_uuid,
		    :i:i_eg_gift_pmt_type,
		    :i:i_eg_gift_interval,
		    :i:i_eg_gift_start_date,
		    :i:i_eg_gift_end_date,
		    :i:i_eg_gift_count,
		    :i:i_eg_gift_date,
		    :i:i_eg_gift_trx_date,
		    :i:i_eg_gift_settlement_date, 
		    :i:i_eg_gift_lastfour,
		    i_eg_desig_name = :t:i_eg_target_desig_name,
		    :i:i_eg_desig_notes,
		    i_eg_postprocess = substring(:i:i_eg_postprocess, 2),	-- may need post processing from later modules
		    -- constant values
		    :i:i_eg_service,
		    :i:i_eg_processor,
		    :i:i_eg_gift_currency,
		    :i:i_eg_receipt_desired,
		    :i:i_eg_anonymous,
		    :i:i_eg_prayforme,
		    :i:i_eg_acctmap_future,
		    :i:i_eg_fundmap_future,
		    :i:i_eg_donormap_future,
		    s_date_created = getdate(),
		    s_created_by = user_name(),
		    s_date_modified = getdate(),
		    s_modified_by = user_name(),
		    :i:i_eg_donor_prefix,
		    :i:i_eg_donor_suffix,
		    :i:i_eg_donor_addr3,
		    :i:a_ledger_number
		FROM
		    IDENTITY /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows i,
		    /apps/kardia/modules/rcpt/ids.csv/rows t
		WHERE
		    substring(:i:i_eg_postprocess, 1, 1) = 'S'
		    AND :i:i_eg_desig_uuid = :splitDesig:value
		    AND substring(replace(:i:i_eg_donor_uuid, ' ', ''), charindex('|', replace(:i:i_eg_donor_uuid, ' ', '')) + 1) = :t:i_eg_split_id
		    AND :i:i_eg_deposit_amt IS NOT NULL
		    AND :i:i_eg_net_amount IS NOT NULL
		;
	
		-- make a collection of ids of the transactiosn that do not sum up properly
		DECLARE COLLECTION invalid;
		INSERT INTO
		    COLLECTION invalid
		SELECT 
		     :s:i_eg_trx_uuid, :s:i_eg_gift_uuid, calc_gross = sum(:s:i_eg_gift_amount), :s:i_eg_deposit_gross_amt
		FROM
		    COLLECTION split s
		GROUP BY
		    :s:i_eg_trx_uuid, :s:i_eg_gift_uuid
		Having 
		    :calc_gross != :s:i_eg_deposit_gross_amt
		;
	
		-- now actually remove the invalid items
		DELETE
		FROM
		    IDENTITY COLLECTION split s,
		    COLLECTION invalid i
		WHERE 
		    :s:i_eg_trx_uuid = :i:i_eg_trx_uuid
		;
	
		-- list all of the i_eg_trx_uuid values
		DECLARE COLLECTION trx_uuids;
		INSERT INTO
		    COLLECTION trx_uuids
		SELECT
		    :s:i_eg_trx_uuid
		FROM
		    COLLECTION split s
		GROUP BY 
		    :s:i_eg_trx_uuid
		;
	
		-- write the new columns to the table
		INSERT INTO
		    /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows
		SELECT
		    *
		FROM 
		    COLLECTION split s
		ON DUPLICATE
		    :a_ledger_number, :i_eg_trx_uuid, :i_eg_desig_uuid, :i_eg_line_item
		UPDATE SET
		    :i_eg_deposit_date = :s:i_eg_deposit_date,
		    :i_eg_deposit_uuid = :s:i_eg_deposit_uuid,
		    :i_eg_deposit_gross_amt = :s:i_eg_deposit_gross_amt,
		    :i_eg_deposit_amt = :s:i_eg_deposit_amt,
		    :i_eg_net_amount = :s:i_eg_net_amount,
		    :i_eg_desig_notes = :s:i_eg_desig_notes,
		    :i_eg_status = :s:i_eg_status,
		    :i_eg_returned_status = :s:i_eg_returned_status,
		    :i_eg_gift_settlement_date = :s:i_eg_gift_settlement_date,
		    :s_date_modified = getdate() IF MODIFIED,
		    :s_modified_by = user_name() IF MODIFIED
		;
	
		-- Delete any transactions that have already been split. (i.e. have an id in trx_uuid)
		DELETE 
		FROM
		    IDENTITY /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows i,
		    COLLECTION trx_uuids u
		WHERE 
		    substring(:i_eg_postprocess, 1, 1) = 'S'
		    AND :i_eg_desig_uuid = :splitDesig:value
		    AND :i:i_eg_trx_uuid = :u:i_eg_trx_uuid
		;
	
		-- Move to back for any could not handle. (i.e. any transactions left with the 0_multiple and S)
		UPDATE 
		    IDENTITY /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows
		SET 
		    :i_eg_postprocess = substring(:i_eg_postprocess, 2) + 'S'
		WHERE 
		    substring(:i_eg_postprocess, 1, 1) = 'S'
		    AND :i_eg_desig_uuid = :splitDesig:value
		;
	
		-- Remove S from any that don't need split (i.e. has the S but were lacking the 0_multiple designation)
		UPDATE 
		    /apps/kardia/data/Kardia_DB/i_eg_gift_import/rows
		SET 
		    :i_eg_postprocess = substring(:i_eg_postprocess, 2)
		WHERE 
		    substring(:i_eg_postprocess, 1, 1) = 'S'
		    AND :i_eg_desig_uuid != :splitDesig:value
    ";
    }